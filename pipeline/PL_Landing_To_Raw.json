{
	"name": "PL_Landing_To_Raw",
	"properties": {
		"activities": [
			{
				"name": "BatchOrAdhoc",
				"type": "IfCondition",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@not(equals(pipeline().parameters.Batch,'Adhoc'))",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "MoveFileToRaw",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Validate",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "BinarySource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true,
										"deleteFilesAfterCompletion": false
									},
									"formatSettings": {
										"type": "BinaryReadSettings"
									}
								},
								"sink": {
									"type": "BinarySink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									}
								},
								"enableStaging": false
							}
						},
						{
							"name": "Validate",
							"description": "Checks if the dataset is registered in Metadata, if yes, It moves the file to Raw Folder\n",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT LandingContainer, LandingFolderPath, RawContainer, RawZoneFolderPath,RawZoneFileName,FileSizeMin, FileSizeMax,FileNameKeyWord from procfwk.Datasets \nwhere CHARINDEX(FileNameKeyWord,'@{pipeline().parameters.FileName}')<>0",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"firstRowOnly": true
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "ExecuteBatchPipeline",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "PL_MoveBatchfilesToRaw",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"Batch": {
										"value": "@pipeline().parameters.Batch",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			}
		],
		"parameters": {
			"Batch": {
				"type": "string"
			},
			"FileName": {
				"type": "string"
			},
			"FolderPath": {
				"type": "string"
			}
		},
		"variables": {
			"IsBatch": {
				"type": "Boolean"
			}
		},
		"folder": {
			"name": "_Workers"
		},
		"annotations": [],
		"lastPublishTime": "2021-12-15T04:16:53Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}